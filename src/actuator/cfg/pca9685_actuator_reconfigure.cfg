from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("steer_min_pulsewidth", int_t, 1, "PWM pulse width at the servo's minimum rotation angle", 1000, 1000, 2000)
gen.add("steer_mid_pulsewidth", int_t, 1, "PWM pulse width at the servo's maximum rotation angle", 1500, 1000, 2000)
gen.add("steer_max_pulsewidth", int_t, 1, "PWM pulse width at the midpoint angle of the servo", 2000, 1000, 2000)

gen.add("throttle_min_pulsewidth", int_t, 2, "The PWM pulse width at the maximum reverse throttle", 1000, 1000, 2000)
gen.add("throttle_mid_pulsewidth", int_t, 2, "The PWM pulse width at zero throttle", 1500, 1000, 2000)
gen.add("throttle_max_pulsewidth", int_t, 2, "The PWM pulse width at the maximum forward throttle", 2000, 1000, 2000)

channel_consts = [gen.const("CHANNEL_{}".format(i), int_t, i, "Channel {}".format(i)) for i in range(16)]
channel_enum = gen.enum(channel_consts, "Select one of the 16 PCA9685 channels")

gen.add("steer_pwm_channel", int_t, 4, "PCA9685 output channel for steer", 0, 0, 15, edit_method=channel_enum)
gen.add("throttle_pwm_channel", int_t, 4, "PCA9685 output channel for throttle", 0, 0, 15, edit_method=channel_enum)

gen.add("pwm_frequency", int_t, 8, "PCA9685 pwm output frequency", 60, 25, 1500)
gen.add("bus_device", str_t, 16, "The device file name of the I2C bus to which the PCA9685 is connected", "/dev/i2c-1")
# gen.add("device_address", str_t, 2, "PCA9685's I2C bus address", "0x40")

exit(gen.generate("actuator", "pca9685_actuator_node", "PCA9685Actuator"))